<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:util="http://www.springframework.org/schema/util"
        xmlns:jdbc="http://www.springframework.org/schema/jdbc"
        xmlns:cache="http://www.springframework.org/schema/cache"
        xmlns:mvc="http://www.springframework.org/schema/mvc"

        xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd

                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd

                http://www.springframework.org/schema/aop
                http://www.springframework.org/schema/aop/spring-aop.xsd

                http://www.springframework.org/schema/tx
                http://www.springframework.org/schema/tx/spring-tx.xsd

                http://www.springframework.org/schema/util
                http://www.springframework.org/schema/util/spring-util.xsd

                http://www.springframework.org/schema/jdbc
                http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd

                http://www.springframework.org/schema/cache
                http://www.springframework.org/schema/cache/spring-cache-3.1.xsd

                http://www.springframework.org/schema/mvc
                http://www.springframework.org/schema/mvc/spring-mvc.xsd"
>
    <!--
        1. Spring 系统全局配置
            配注解驱动、配置属性文件获取
        2. 按照次序， 逐一配置
            1 - dao
                DataSource、SQLSessionFactory、XxxDao
            2 - biz
            3 - controller

    -->
    <!-- 1. Spring 系统全局配置 -->
    <!-- 配置使用注解完成WebApp所需的注解扫描， 不是必须的。 -->
    <mvc:annotation-driven/>


    <mvc:default-servlet-handler/>

    <!-- <mvc:resources location="/css/" mapping="/css/**"/>
     <mvc:resources location="/images/" mapping="/images/*"/>
 -->

    <!-- <mvc:interceptors>
              <mvc:interceptor>
                  <mvc:mapping path="/**/*"/>

                 <mvc:exclude-mapping path="/**/*.css"/>

                 <mvc:exclude-mapping path="/**/*.png"/>

                 <bean class="com.VisitInterceptor"></bean>
              </mvc:interceptor>
          </mvc:interceptors>
 -->

    <!-- 指明含有注解的文件的位置， 建议给出"项目根包"， 并开始扫描注解 -->
    <context:component-scan base-package="com.test.*"/>
    <!-- 指明并获取需要的属性配置文件 -->
    <context:property-placeholder location="classpath*:dbinfo.properties"/>

    <!-- dao -->
    <!-- DataSource 以Spring jdbcDataSource为例 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName">
            <value>${driver}</value>
        </property>
        <property name="url">
            <value>${url}</value>
        </property>
        <property name="username">
            <value>${username2}</value>
        </property>
        <property name="password">
            <value>${password2}</value>
        </property>
    </bean>
    <!-- 借助dataSource， 创建SQLSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations"
                  value="classpath*:com/test/domain/po/*.xml"/>
        <property name="typeAliasesPackage"
                  value="com.test.domain.po"/>
    </bean>
    <!-- XxxDao -->
    <!--<bean id = "userDao" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
    <!--<property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
    <!--<property name="mapperInterface" value="com.test.dao.UserDao"/>-->
    <!--</bean>-->
    <!-- 保证所有XxxDao实例化对象的名称叫： xxxDao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.test.dao"/>
    </bean>
    <!--
        UserDao userDao = session.getMapper(UserDao.class);
    -->

    <!-- Contoller 控制器和视图(资源)绑定 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="maxUploadSize" value="10000000"/>
    </bean>

    <!--
    <bean id = "inkBox" class="com.test.inkbox.color.ColorInk"/>
    <bean id = "paper" class="com.test.paper.a4.A4Paper"/>
    <bean id = "printer" class="com.test.printer.Printer">
        <property name="inkBox" ref="inkBox"/>
        <property name="paper" ref="paper"/>
        <property name="content" value="MyContent!"/>
    </bean>
    inkBox = new com.test.inkbox.color.ColorInk();
    paper = new com.test.paper.a4.A4Paper();
    printer = new Printer();
    printer.setInkBox(inkBox);
    printer.setPaper(paper);
    printer.setContent("MyContent!");
 -->

</beans>